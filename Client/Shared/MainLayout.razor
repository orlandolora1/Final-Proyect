@inherits LayoutComponentBase
@inject IJSRuntime js

<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />

@using ProyectoFinal.Client.Extensiones;
@using Microsoft.AspNetCore.Components.Authorization;
@inject AuthenticationStateProvider autenticacionProvider
@inject NavigationManager navManager


<div class="page @ObtenerClase()">
	<div class="sidebar">
		<NavMenu />
	</div>

	<main>
		<div class="main">
			<div class="top-row px-4">
				@*Temas*@
				<select @onchange="CambiarTema" style="margin-left: 1rem;">
					@foreach (var modo in modos)
					{
						<option selected="@EsSeleccionado(modo)" value="@modo">@modo</option>
					}
				</select>
				<a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
				<a @onclick="CerrarSesion" href="javascript:void(0)">Salir</a>
			</div>

			<articlek class="content px-4">
				@Body
			</articlek>
		</div>
	</main>
</div>


@code {
	private string? modoSeleccionado = "Luz";
	private List<string> modos = new List<string>() { "Luz", "Oscuro", "Rojo" };
	private readonly string llaveTema = "tema";

	protected override async Task OnInitializedAsync()
	{
		var modoLocalStorage = await js.InvokeAsync<string>("leerLocarStorage", llaveTema);
		if (!string.IsNullOrEmpty(modoLocalStorage))
		{
			modoSeleccionado = modoLocalStorage;
		}
	}

	private string ObtenerClase()
	{
		if (modoSeleccionado == "Luz")
		{
			return string.Empty;
		}
		if (modoSeleccionado == "Rojo")
		{
			return "modo-rojo";
		}
		else
		{
			return "modo-oscuro";
		}
	}

	private bool EsSeleccionado(string modo) => modo == modoSeleccionado;

	private async Task CambiarTema(ChangeEventArgs e)
	{
		modoSeleccionado = e.Value.ToString();
		await js.InvokeVoidAsync("agregarLocalStorage", llaveTema, modoSeleccionado);
	}

	private async Task CerrarSesion()
	{
		var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
		await autenticacionExt.ActualizarEstadoAutenticacion(null);
		navManager.NavigateTo("/", true);
	}
}